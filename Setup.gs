// =============================
// SCRIPT DE MIGRA√á√ÉO E SETUP
// =============================

/**
 * Execute esta fun√ß√£o UMA VEZ ap√≥s fazer o deploy para configurar o sistema.
 * Esta fun√ß√£o inicializa todas as configura√ß√µes necess√°rias.
 */
function configurarSistemaInicial() {
  try {
    Logger.log('üöÄ Iniciando configura√ß√£o do sistema...');
    
    // 1. Inicializar contador de alunos
    inicializarContadorDeAlunos();
    Logger.log('‚úÖ Contador de alunos inicializado');
    
    // 2. Verificar se todas as planilhas s√£o acess√≠veis
    verificarConexoesPlanilhas();
    Logger.log('‚úÖ Conex√µes com planilhas verificadas');
    
    // 3. Configurar triggers (se necess√°rio)
    configurarTriggers();
    Logger.log('‚úÖ Triggers configurados');
    
    Logger.log('üéâ Sistema configurado com sucesso!');
    SpreadsheetApp.getUi().alert(
      'Sistema Configurado!', 
      'O sistema Personal Trainer foi configurado com sucesso.\n\nVoc√™ pode agora usar o menu "üî• Personal Trainer" para gerenciar treinos e alunos.',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
    
  } catch (e) {
    Logger.log('‚ùå Erro na configura√ß√£o: ' + e.message);
    SpreadsheetApp.getUi().alert(
      'Erro na Configura√ß√£o',
      'Ocorreu um erro durante a configura√ß√£o:\n\n' + e.message + '\n\nVerifique os IDs das planilhas em constants.js',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

/**
 * Verifica se todas as planilhas configuradas s√£o acess√≠veis.
 */
function verificarConexoesPlanilhas() {
  var erros = [];
  
  try {
    SpreadsheetApp.openById(CONSTANTES.ID_PLANILHA_MAE);
    Logger.log('‚úì Planilha M√£e acess√≠vel');
  } catch (e) {
    erros.push('Planilha M√£e (ID: ' + CONSTANTES.ID_PLANILHA_MAE + ')');
  }
  
  try {
    SpreadsheetApp.openById(CONSTANTES.ID_PLANILHA_BRAINER);
    Logger.log('‚úì Planilha Brainer acess√≠vel');
  } catch (e) {
    erros.push('Planilha Brainer (ID: ' + CONSTANTES.ID_PLANILHA_BRAINER + ')');
  }
  
  try {
    DriveApp.getFileById(CONSTANTES.ID_TEMPLATE_ALUNO);
    Logger.log('‚úì Template de Aluno acess√≠vel');
  } catch (e) {
    erros.push('Template de Aluno (ID: ' + CONSTANTES.ID_TEMPLATE_ALUNO + ')');
  }
  
  try {
    DriveApp.getFolderById(CONSTANTES.ID_PASTA_ALUNOS_ATIVOS);
    Logger.log('‚úì Pasta de Alunos Ativos acess√≠vel');
  } catch (e) {
    erros.push('Pasta de Alunos Ativos (ID: ' + CONSTANTES.ID_PASTA_ALUNOS_ATIVOS + ')');
  }
  
  if (erros.length > 0) {
    throw new Error('As seguintes planilhas/pastas n√£o s√£o acess√≠veis:\n' + erros.join('\n'));
  }
}

/**
 * Configura triggers necess√°rios para o sistema.
 */
function configurarTriggers() {
  // Remove triggers existentes para evitar duplica√ß√£o
  var triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(function(trigger) {
    if (trigger.getHandlerFunction() === 'onOpen') {
      ScriptApp.deleteTrigger(trigger);
    }
  });
  
  // Configura trigger de onOpen
  ScriptApp.newTrigger('onOpen')
    .timeBased()
    .everyDays(1) // Dummy trigger, o onOpen real √© autom√°tico
    .create();
  
  Logger.log('‚úì Triggers configurados');
}
