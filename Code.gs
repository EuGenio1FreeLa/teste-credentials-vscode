// =============================
// MAIN ENTRY POINT
// =============================

/**
 * Fun√ß√£o que √© executada quando a planilha √© aberta.
 * Cria o menu personalizado do sistema.
 */
function onOpen(e) {
  var menu = SpreadsheetApp.getUi()
    .createMenu('üî• Personal Trainer')
    .addItem('‚û°Ô∏è Cadastrar Novo Aluno', 'abrirFormularioCadastro')
    .addSeparator()
    .addItem('üì§ Enviar Treino Semanal', 'enviarTreinoSemanal')
    .addItem('üì• Coletar Feedback da Semana', 'coletarFeedback')
    .addItem('üîÑ Carregar √öltimo Treino', 'carregarUltimoTreinoAluno')
    .addSeparator()
    .addItem('üßπ Limpar Central de Treinos', 'limparCentralTreinos');
    
  // Submenu de administra√ß√£o
  var menuAdmin = SpreadsheetApp.getUi()
    .createMenu('‚öôÔ∏è Admin')
    .addItem('üöÄ Configurar Sistema Inicial', 'configurarSistemaInicial')
    .addItem('üß™ Testar Sistema', 'testarSistema')
    .addItem('üìä Informa√ß√µes do Sistema', 'exibirInformacoesSistema')
    .addSeparator()
    .addItem('üßπ Limpar Sistema (CUIDADO!)', 'limparSistema');
    
  menu.addSubMenu(menuAdmin)
      .addToUi();
}

/**
 * Abre o formul√°rio de cadastro de aluno.
 */
function abrirFormularioCadastro() {
  var html = HtmlService.createHtmlOutputFromFile('CadastrarAluno')
      .setWidth(450)
      .setHeight(580);
  SpreadsheetApp.getUi().showModalDialog(html, 'Formul√°rio de Cadastro');
}

/**
 * Fun√ß√£o que executa quando o webapp √© acessado
 */
function doGet(e) {
  if (e.parameter.page === 'feedback') {
    return HtmlService.createHtmlOutputFromFile('FeedbackForm')
      .setTitle('Feedback de Treino');
  }
  
  return HtmlService.createHtmlOutputFromFile('Error')
    .setTitle('P√°gina n√£o encontrada');
}

/**
 * Processa o feedback do aluno via formul√°rio web
 */
function processarFeedback(formData) {
  try {
    logInfo('Processando feedback de treino', formData);
    return registrarFeedbackTreino(formData.idAluno, formData.idTreino, formData);
  } catch (error) {
    logError('Erro ao processar feedback', error);
    return { success: false, message: error.message };
  }
}

/**
 * Testa todo o sistema para verificar se est√° funcionando adequadamente
 */
function testarSistema() {
  var ui = SpreadsheetApp.getUi();
  
  try {
    // Mostrar que teste est√° come√ßando
    ui.alert('Teste do Sistema', 'Iniciando testes do sistema...', ui.ButtonSet.OK);
    
    // 1. Testar conex√£o com planilhas
    verificarConexoesPlanilhas();
    
    // 2. Verificar configura√ß√£o de contador de alunos
    var scriptProperties = PropertiesService.getScriptProperties();
    var ultimoId = scriptProperties.getProperty('ULTIMO_ID_ALUNO');
    if (!ultimoId) {
      inicializarContadorDeAlunos();
      ultimoId = scriptProperties.getProperty('ULTIMO_ID_ALUNO');
    }
    
    // 3. Verificar menu e triggers
    var triggers = ScriptApp.getProjectTriggers();
    var temOnOpen = triggers.some(function(trigger) {
      return trigger.getHandlerFunction() === 'onOpen';
    });
    
    if (!temOnOpen) {
      configurarTriggers();
    }
    
    // Mostrar resultados
    ui.alert(
      'Testes Conclu√≠dos', 
      'Sistema testado com sucesso!\n\n' +
      '‚úÖ Conex√£o com planilhas: OK\n' +
      '‚úÖ Contador de alunos: ' + ultimoId + '\n' +
      '‚úÖ Triggers: ' + (temOnOpen ? 'OK' : 'Configurados agora') + '\n',
      ui.ButtonSet.OK
    );
    
  } catch (e) {
    ui.alert('Erro nos Testes', 'Ocorreu um erro durante os testes: ' + e.message, ui.ButtonSet.OK);
  }
}

/**
 * Exibe informa√ß√µes do sistema (vers√£o, contador de alunos, etc)
 */
function exibirInformacoesSistema() {
  var ui = SpreadsheetApp.getUi();
  
  try {
    var scriptProperties = PropertiesService.getScriptProperties();
    var ultimoId = scriptProperties.getProperty('ULTIMO_ID_ALUNO') || 'N√£o inicializado';
    
    var numAlunos = 0;
    try {
      var planilhaMae = SpreadsheetApp.openById(CONSTANTES.ID_PLANILHA_MAE);
      var abaCadastro = planilhaMae.getSheetByName(CONSTANTES.ABA_ALUNOS_CADASTRO);
      numAlunos = abaCadastro.getLastRow() - 1; // -1 para o cabe√ßalho
    } catch (e) {
      numAlunos = 'Erro ao contar';
    }
    
    ui.alert(
      'Informa√ß√µes do Sistema', 
      'Sistema Personal Trainer\n\n' +
      'Vers√£o: 1.0.0\n' +
      '√öltimo ID de Aluno: ' + ultimoId + '\n' +
      'N√∫mero de Alunos: ' + numAlunos + '\n' +
      'Data: ' + new Date().toLocaleDateString() + '\n',
      ui.ButtonSet.OK
    );
    
  } catch (e) {
    ui.alert('Erro', 'Ocorreu um erro ao exibir informa√ß√µes: ' + e.message, ui.ButtonSet.OK);
  }
}

/**
 * Limpa configura√ß√µes do sistema (PERIGO!)
 */
function limparSistema() {
  var ui = SpreadsheetApp.getUi();
  
  var resposta = ui.alert(
    'ATEN√á√ÉO! Opera√ß√£o Perigosa', 
    'Esta opera√ß√£o ir√° limpar todas as configura√ß√µes do sistema, incluindo o contador de alunos.\n\n' +
    'Isso N√ÉO apagar√° os alunos nem os dados existentes, mas pode causar problemas ao cadastrar novos alunos.\n\n' +
    'Tem certeza que deseja continuar?',
    ui.ButtonSet.YES_NO
  );
  
  if (resposta !== ui.Button.YES) {
    ui.alert('Opera√ß√£o Cancelada', 'Nenhuma altera√ß√£o foi feita.', ui.ButtonSet.OK);
    return;
  }
  
  try {
    // Limpar propriedades
    PropertiesService.getScriptProperties().deleteProperty('ULTIMO_ID_ALUNO');
    
    // Remover triggers
    var triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(function(trigger) {
      ScriptApp.deleteTrigger(trigger);
    });
    
    ui.alert(
      'Sistema Limpo!', 
      'Todas as configura√ß√µes do sistema foram removidas.\n\n' +
      'Execute "Configurar Sistema Inicial" para configurar novamente.',
      ui.ButtonSet.OK
    );
    
  } catch (e) {
    ui.alert('Erro', 'Ocorreu um erro ao limpar o sistema: ' + e.message, ui.ButtonSet.OK);
  }
}
