// =============================
// MAIN ENTRY POINT
// =============================

/**
 * Fun√ß√£o que √© executada quando a planilha √© aberta.
 * Cria o menu personalizado do sistema.
 */
function onOpen(e) {
  try {
    var ui = SpreadsheetApp.getUi();
    var menu = ui.createMenu('üî• Personal Trainer')
      .addItem('‚û°Ô∏è Cadastrar Novo Aluno', 'abrirFormularioCadastro')
      .addSeparator()
      .addItem('üì§ Enviar Treino Semanal', 'enviarTreino')
      .addItem('üì• Coletar Feedback da Semana', 'coletarFeedback')
      .addItem('üîÑ Carregar √öltimo Treino', 'carregarUltimoTreinoAluno')
      .addSeparator()
      .addItem('üßπ Limpar Central de Treinos', 'limparCentralTreinos');

    var menuAdmin = ui.createMenu('‚öôÔ∏è Admin')
      .addItem('üöÄ Configurar Sistema Inicial', 'configurarSistemaInicial')
      .addItem('‚úÖ Validar Sistema Unificado', 'validarSistemaUnificado')
      .addItem('üß™ Testar Sistema', 'testarSistema')
      .addItem('üîç Diagn√≥stico de Treinos', 'diagnosticarConfiguracaoTreino')
      .addItem('üìä Informa√ß√µes do Sistema', 'exibirInformacoesSistema')
      .addSeparator()
      .addItem('üßπ Limpar Sistema (CUIDADO!)', 'limparSistema');

    menu.addSubMenu(menuAdmin).addToUi();
  } catch (err) {
    console.error('onOpen failed: ' + err.stack);
    Logger.log('onOpen failed: ' + err.message);
    throw err;
  }
}

/**
 * Abre o formul√°rio de cadastro de aluno.
 */
function abrirFormularioCadastro() {
  var html = HtmlService.createHtmlOutputFromFile('CadastrarAluno')
      .setWidth(450)
      .setHeight(580);
  SpreadsheetApp.getUi().showModalDialog(html, 'Formul√°rio de Cadastro');
}

/**
 * Fun√ß√£o que executa quando o webapp √© acessado
 */
function doGet(e) {
  try {
    if (e.parameter.page === 'feedback') {
      return HtmlService.createHtmlOutputFromFile('FeedbackForm')
        .setTitle('Feedback de Treino');
    }
    
    return HtmlService.createHtmlOutputFromFile('Error')
      .setTitle('P√°gina n√£o encontrada');
  } catch (err) {
    console.error('doGet failed: ' + err.stack);
    Logger.log('doGet failed: ' + err.message);
    throw err;  // Relan√ßar o erro para registro no Stackdriver
  }
}

/**
 * Processa o feedback do aluno via formul√°rio web
 */
function processarFeedback(formData) {
  try {
    console.log('Processando feedback de treino: ' + JSON.stringify(formData));
    logInfo('Processando feedback de treino', formData);
    return registrarFeedbackTreino(formData.idAluno, formData.idTreino, formData);
  } catch (err) {
    console.error('processarFeedback failed: ' + err.stack);
    logError('Erro ao processar feedback', err);
    return { success: false, message: err.message };
  }
}

/**
 * Testa todo o sistema para verificar se est√° funcionando adequadamente
 */
function testarSistema() {
  var ui = SpreadsheetApp.getUi();
  
  try {
    // Mostrar que teste est√° come√ßando
    ui.alert('Teste do Sistema', 'Iniciando testes do sistema...', ui.ButtonSet.OK);
    
    // 1. Testar conex√£o com planilhas
    verificarConexoesPlanilhas();
    
    // 2. Verificar configura√ß√£o de contador de alunos
    var scriptProperties = PropertiesService.getScriptProperties();
    var ultimoId = scriptProperties.getProperty('ULTIMO_ID_ALUNO');
    if (!ultimoId) {
      inicializarContadorDeAlunos();
      ultimoId = scriptProperties.getProperty('ULTIMO_ID_ALUNO');
    }
    
    // 3. Verificar menu e triggers
    var triggers = ScriptApp.getProjectTriggers();
    var temOnOpen = triggers.some(function(trigger) {
      return trigger.getHandlerFunction() === 'onOpen';
    });
    
    if (!temOnOpen) {
      configurarTriggers();
    }
    
    // Mostrar resultados
    ui.alert(
      'Testes Conclu√≠dos', 
      'Sistema testado com sucesso!\n\n' +
      '‚úÖ Conex√£o com planilhas: OK\n' +
      '‚úÖ Contador de alunos: ' + ultimoId + '\n' +
      '‚úÖ Triggers: ' + (temOnOpen ? 'OK' : 'Configurados agora') + '\n',
      ui.ButtonSet.OK
    );
    
  } catch (e) {
    ui.alert('Erro nos Testes', 'Ocorreu um erro durante os testes: ' + e.message, ui.ButtonSet.OK);
  }
}

/**
 * Exibe informa√ß√µes do sistema (vers√£o, contador de alunos, etc)
 */
function exibirInformacoesSistema() {
  var ui = SpreadsheetApp.getUi();
  
  try {
    var scriptProperties = PropertiesService.getScriptProperties();
    var ultimoId = scriptProperties.getProperty('ULTIMO_ID_ALUNO') || 'N√£o inicializado';
    
    var numAlunos = 0;
    try {
      var planilhaMae = SpreadsheetApp.openById(CONSTANTES.ID_PLANILHA_MAE);
      var abaCadastro = planilhaMae.getSheetByName(CONSTANTES.ABA_ALUNOS_CADASTRO);
      numAlunos = abaCadastro.getLastRow() - 1; // -1 para o cabe√ßalho
    } catch (e) {
      numAlunos = 'Erro ao contar';
    }
    
    ui.alert(
      'Informa√ß√µes do Sistema', 
      'Sistema Personal Trainer\n\n' +
      'Vers√£o: 1.0.0\n' +
      '√öltimo ID de Aluno: ' + ultimoId + '\n' +
      'N√∫mero de Alunos: ' + numAlunos + '\n' +
      'Data: ' + new Date().toLocaleDateString() + '\n',
      ui.ButtonSet.OK
    );
    
  } catch (e) {
    ui.alert('Erro', 'Ocorreu um erro ao exibir informa√ß√µes: ' + e.message, ui.ButtonSet.OK);
  }
}

/**
 * Limpa configura√ß√µes do sistema (PERIGO!)
 */
function limparSistema() {
  var ui = SpreadsheetApp.getUi();
  
  var resposta = ui.alert(
    'ATEN√á√ÉO! Opera√ß√£o Perigosa', 
    'Esta opera√ß√£o ir√° limpar todas as configura√ß√µes do sistema, incluindo o contador de alunos.\n\n' +
    'Isso N√ÉO apagar√° os alunos nem os dados existentes, mas pode causar problemas ao cadastrar novos alunos.\n\n' +
    'Tem certeza que deseja continuar?',
    ui.ButtonSet.YES_NO
  );
  
  if (resposta !== ui.Button.YES) {
    ui.alert('Opera√ß√£o Cancelada', 'Nenhuma altera√ß√£o foi feita.', ui.ButtonSet.OK);
    return;
  }
  
  try {
    // Limpar propriedades
    PropertiesService.getScriptProperties().deleteProperty('ULTIMO_ID_ALUNO');
    
    // Remover triggers
    var triggers = ScriptApp.getProjectTriggers();
    triggers.forEach(function(trigger) {
      ScriptApp.deleteTrigger(trigger);
    });
    
    ui.alert(
      'Sistema Limpo!', 
      'Todas as configura√ß√µes do sistema foram removidas.\n\n' +
      'Execute "Configurar Sistema Inicial" para configurar novamente.',
      ui.ButtonSet.OK
    );
    
  } catch (e) {
    ui.alert('Erro', 'Ocorreu um erro ao limpar o sistema: ' + e.message, ui.ButtonSet.OK);
  }
}

/**
 * Fun√ß√£o de diagn√≥stico para verificar se a configura√ß√£o est√° correta.
 */
function diagnosticarConfiguracaoTreino() {
  try {
    const ui = SpreadsheetApp.getUi();
    const ss = SpreadsheetApp.getActive();
    let diagnostico = "=== DIAGN√ìSTICO DE CONFIGURA√á√ÉO ===\n\n";
    
    // Verificar aba Central de Treinos
    const centralSheet = ss.getSheetByName(SHEETS.CENTRAL);
    if (!centralSheet) {
      diagnostico += "‚ùå Aba 'Central de Treinos' n√£o encontrada!\n";
    } else {
      diagnostico += "‚úÖ Aba 'Central de Treinos' encontrada\n";
      
      const studentIdA1 = centralSheet.getRange('A1').getValue();
      const studentNameB1 = centralSheet.getRange('B1').getValue();
      const mondayDateB2 = centralSheet.getRange('B2').getValue();
      
      diagnostico += "\nC√âLULAS DA CENTRAL DE TREINOS:\n";
      diagnostico += "A1 (ID do Aluno): " + (studentIdA1 || "[VAZIO]") + "\n";
      diagnostico += "B1 (Nome do Aluno): " + (studentNameB1 || "[VAZIO]") + "\n";
      diagnostico += "B2 (Data Segunda): " + (mondayDateB2 || "[VAZIO]") + "\n";
    }
    
    // Verificar aba de cadastro
    const cadastroSheet = ss.getSheetByName(CONSTANTES.ABA_ALUNOS_CADASTRO);
    if (!cadastroSheet) {
      diagnostico += "\n‚ùå Aba '" + CONSTANTES.ABA_ALUNOS_CADASTRO + "' n√£o encontrada!\n";
    } else {
      diagnostico += "\n‚úÖ Aba de cadastro encontrada\n";
      const totalAlunos = cadastroSheet.getLastRow() - 1;
      diagnostico += "Total de alunos cadastrados: " + totalAlunos + "\n";
    }
    
    // Verificar constantes
    diagnostico += "\nCONSTANTES:\n";
    diagnostico += "ABA_CENTRAL_TREINOS: " + CONSTANTES.ABA_CENTRAL_TREINOS + "\n";
    diagnostico += "ABA_ALUNOS_CADASTRO: " + CONSTANTES.ABA_ALUNOS_CADASTRO + "\n";
    diagnostico += "COL_ID_ALUNO_CADASTRO: " + CONSTANTES.COL_ID_ALUNO_CADASTRO + "\n";
    diagnostico += "COL_NOME_ALUNO_CADASTRO: " + CONSTANTES.COL_NOME_ALUNO_CADASTRO + "\n";
    diagnostico += "COL_ID_PLANILHA_ALUNO_CADASTRO: " + CONSTANTES.COL_ID_PLANILHA_ALUNO_CADASTRO + "\n";
    
    Logger.log(diagnostico);
    ui.alert("Diagn√≥stico", diagnostico, ui.ButtonSet.OK);
    
  } catch (e) {
    Logger.log('Erro no diagn√≥stico: ' + e.message);
    SpreadsheetApp.getUi().alert('Erro', 'Erro no diagn√≥stico: ' + e.message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * Fun√ß√£o de valida√ß√£o completa do sistema ap√≥s a unifica√ß√£o
 */
function validarSistemaUnificado() {
  try {
    const ui = SpreadsheetApp.getUi();
    let relatorio = "=== VALIDA√á√ÉO DO SISTEMA UNIFICADO ===\n\n";
    
    // 1. Verificar estrutura b√°sica
    relatorio += "1. ESTRUTURA B√ÅSICA:\n";
    const ss = SpreadsheetApp.getActive();
    const centralSheet = ss.getSheetByName(SHEETS.CENTRAL);
    const cadastroSheet = ss.getSheetByName(CONSTANTES.ABA_ALUNOS_CADASTRO);
    
    relatorio += centralSheet ? "‚úÖ Aba Central de Treinos encontrada\n" : "‚ùå Aba Central de Treinos n√£o encontrada\n";
    relatorio += cadastroSheet ? "‚úÖ Aba de Cadastro encontrada\n" : "‚ùå Aba de Cadastro n√£o encontrada\n";
    
    // 2. Verificar constantes cr√≠ticas
    relatorio += "\n2. CONSTANTES CR√çTICAS:\n";
    relatorio += `‚úÖ ID_PLANILHA_BRAINER: ${IDS.BRAINER}\n`;
    relatorio += `‚úÖ ABA_CENTRAL_TREINOS: ${SHEETS.CENTRAL}\n`;
    relatorio += `‚úÖ ABA_TREINO_SEMANAL: ${SHEETS.WEEKLY}\n`;
    
    // 3. Verificar conectividade com Brainer
    relatorio += "\n3. CONECTIVIDADE:\n";
    try {
      const brainer = SpreadsheetApp.openById(IDS.BRAINER);
      const logSheet = brainer.getSheetByName(SHEETS.LOG);
      relatorio += logSheet ? "‚úÖ Conex√£o com Brainer OK\n" : "‚ùå Aba log_treinos n√£o encontrada no Brainer\n";
    } catch (e) {
      relatorio += "‚ùå Erro ao conectar com Brainer: " + e.message + "\n";
    }
    
    // 4. Verificar fun√ß√µes dispon√≠veis
    relatorio += "\n4. FUN√á√ïES DISPON√çVEIS:\n";
    relatorio += "‚úÖ enviarTreino()\n";
    relatorio += "‚úÖ sendWeeklyWorkout()\n";
    relatorio += "‚úÖ coletarFeedback()\n";
    relatorio += "‚úÖ carregarUltimoTreinoAluno()\n";
    relatorio += "‚úÖ diagnosticarConfiguracaoTreino()\n";
    
    // 5. Verificar configura√ß√£o da Central de Treinos
    if (centralSheet) {
      relatorio += "\n5. CONFIGURA√á√ÉO ATUAL:\n";
      const studentId = centralSheet.getRange('A1').getValue();
      const studentName = centralSheet.getRange('B1').getValue();
      const mondayDate = centralSheet.getRange('B2').getValue();
      
      relatorio += `A1 (ID Aluno): ${studentId || '[VAZIO]'}\n`;
      relatorio += `B1 (Nome): ${studentName || '[VAZIO]'}\n`;
      relatorio += `B2 (Data): ${mondayDate || '[VAZIO]'}\n`;
    }
    
    relatorio += "\n=== SISTEMA PRONTO PARA USO ===\n";
    relatorio += "Use: Menu üî• Personal Trainer ‚Üí üì§ Enviar Treino Semanal";
    
    Logger.log(relatorio);
    ui.alert("Valida√ß√£o Completa", relatorio, ui.ButtonSet.OK);
    
  } catch (e) {
    Logger.log('Erro na valida√ß√£o: ' + e.message);
    SpreadsheetApp.getUi().alert('Erro', 'Erro na valida√ß√£o: ' + e.message, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}
